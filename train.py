import os
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter
from data_loader import create_data_generator, TRAIN_DIR, VALID_DIR, load_annotations
from model import create_mobilenetv2_model
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# –ü—É—Ç–∏ –∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º
TRAIN_CSV = os.path.join(TRAIN_DIR, "_annotations.csv")
VALID_CSV = os.path.join(VALID_DIR, "_annotations.csv")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
train_df = load_annotations(TRAIN_CSV)
valid_df = load_annotations(VALID_CSV)

# –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π
train_gen = create_data_generator(train_df, augment=True)
valid_gen = create_data_generator(valid_df)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
num_classes = len(train_gen.class_indices)
model = create_mobilenetv2_model(num_classes=num_classes)

print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {num_classes} –∫–ª–∞—Å—Å–æ–≤: {train_gen.class_indices}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
train_counts = Counter(train_gen.classes)
valid_counts = Counter(valid_gen.classes)

print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ Train: {dict(train_counts)}")
print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ Valid: {dict(valid_counts)}")

# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±—É—á–µ–Ω–∏—è
early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)
reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
history = model.fit(
    train_gen,
    validation_data=valid_gen,
    epochs=20,
    callbacks=[early_stopping, reduce_lr]
)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
model.save("mobilenetv2_mushroom.h5")
print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ mobilenetv2_mushroom.h5")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('–≠–ø–æ—Ö–∏')
plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
plt.legend()
plt.show()