import asyncio
import logging
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType
from aiogram.utils import executor
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8100675753:AAEdyuvkFJgX7i3FGU7XTeHUlTq7Bh0TnRk"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
MODEL_PATH = "mobilenetv2_mushroom.h5"
model = load_model(MODEL_PATH)

# –ö–ª–∞—Å—Å—ã –≥—Ä–∏–±–æ–≤ (–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–≤–æ–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏)
CLASS_NAMES = ["–û–ø–µ–Ω–æ–∫ –æ—Å–µ–Ω–Ω–∏–π", "–ú–æ—Ö–æ–≤–∏–∫", "–°—ã—Ä–æ–µ–∂–∫–∞", "–ú—É—Ö–æ–º–æ—Ä –≤–æ–Ω—é—á–∏–π"]
EDIBILITY_MAP = {"–û–ø–µ–Ω–æ–∫ –æ—Å–µ–Ω–Ω–∏–π": "‚úÖ –°—ä–µ–¥–æ–±–Ω—ã–π", "–ú–æ—Ö–æ–≤–∏–∫": "‚úÖ –°—ä–µ–¥–æ–±–Ω—ã–π",
                 "–°—ã—Ä–æ–µ–∂–∫–∞": "‚úÖ –°—ä–µ–¥–æ–±–Ω—ã–π", "–ú—É—Ö–æ–º–æ—Ä –≤–æ–Ω—é—á–∏–π": "‚ùå –Ø–¥–æ–≤–∏—Ç—ã–π"}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –≤–∏–¥ –∏ —Å—ä–µ–¥–æ–±–Ω–æ—Å—Ç—å! üçÑ")


@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: types.Message):
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo_bytes = await photo.download(destination=io.BytesIO())  # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –¥–ª—è –º–æ–¥–µ–ª–∏
    img = Image.open(photo_bytes)
    img = img.resize((224, 224))  # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
    img_array = image.img_to_array(img) / 255.0  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    img_array = np.expand_dims(img_array, axis=0)  # –î–æ–±–∞–≤–ª—è–µ–º batch-–∏–∑–º–µ—Ä–µ–Ω–∏–µ

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    prediction = model.predict(img_array)
    predicted_class = CLASS_NAMES[np.argmax(prediction)]  # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    edibility = EDIBILITY_MAP.get(predicted_class, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(f"üîç –ì—Ä–∏–±: {predicted_class}\nüçΩ –°—ä–µ–¥–æ–±–Ω–æ—Å—Ç—å: {edibility}")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
