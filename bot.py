import asyncio
import logging
import numpy as np
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ContentType
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8100675753:AAEdyuvkFJgX7i3FGU7XTeHUlTq7Bh0TnRk"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
MODEL_PATH = "mobilenetv2_mushroom.h5"
model = load_model(MODEL_PATH)
model.compile()  # –î–æ–±–∞–≤–∏–ª, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

# –ö–ª–∞—Å—Å—ã –≥—Ä–∏–±–æ–≤
CLASS_NAMES = ["–û–ø–µ–Ω–æ–∫ –æ—Å–µ–Ω–Ω–∏–π", "–ú–æ—Ö–æ–≤–∏–∫", "–°—ã—Ä–æ–µ–∂–∫–∞", "–ú—É—Ö–æ–º–æ—Ä –≤–æ–Ω—é—á–∏–π"]
EDIBILITY_MAP = {
    "–û–ø–µ–Ω–æ–∫ –æ—Å–µ–Ω–Ω–∏–π": "‚úÖ –°—ä–µ–¥–æ–±–Ω—ã–π",
    "–ú–æ—Ö–æ–≤–∏–∫": "‚úÖ –°—ä–µ–¥–æ–±–Ω—ã–π",
    "–°—ã—Ä–æ–µ–∂–∫–∞": "‚úÖ –°—ä–µ–¥–æ–±–Ω—ã–π",
    "–ú—É—Ö–æ–º–æ—Ä –≤–æ–Ω—é—á–∏–π": "‚ùå –Ø–¥–æ–≤–∏—Ç—ã–π"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


async def start_handler(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –≥—Ä–∏–±–∞, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –≤–∏–¥ –∏ —Å—ä–µ–¥–æ–±–Ω–æ—Å—Ç—å! üçÑ")


async def handle_photo(message: types.Message):
    try:
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo_bytes = io.BytesIO()

        # !!! –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.download –≤–º–µ—Å—Ç–æ photo.download
        await bot.download(photo, destination=photo_bytes)
        photo_bytes.seek(0)  # –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –º–æ–¥–µ–ª–∏
        img = Image.open(photo_bytes).convert("RGB")
        img = img.resize((224, 224))  # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        img_array = image.img_to_array(img) / 255.0  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        img_array = np.expand_dims(img_array, axis=0)  # –î–æ–±–∞–≤–ª—è–µ–º batch-–∏–∑–º–µ—Ä–µ–Ω–∏–µ

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict(img_array)
        predicted_class = CLASS_NAMES[np.argmax(prediction)]  # –ö–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        edibility = EDIBILITY_MAP.get(predicted_class, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.reply(f"üîç –ì—Ä–∏–±: {predicted_class}\nüçΩ –°—ä–µ–¥–æ–±–Ω–æ—Å—Ç—å: {edibility}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.message.register(start_handler, F.text == "/start")
dp.message.register(handle_photo, F.photo)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
